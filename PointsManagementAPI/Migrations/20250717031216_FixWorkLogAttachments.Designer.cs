// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PointsManagementAPI.Data;

#nullable disable

namespace PointsManagementAPI.Migrations
{
    [DbContext(typeof(PointsDbContext))]
    [Migration("20250717031216_FixWorkLogAttachments")]
    partial class FixWorkLogAttachments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PointsManagementAPI.Models.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.CalculationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CalculationRules");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.PointsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PointsCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8246),
                            Description = "基本工作項目",
                            IsActive = true,
                            Multiplier = 1.0m,
                            Name = "一般積分",
                            Type = "general"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8253),
                            Description = "技術專業項目",
                            IsActive = true,
                            Multiplier = 1.0m,
                            Name = "專業積分",
                            Type = "professional"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8255),
                            Description = "管理職能項目",
                            IsActive = true,
                            Multiplier = 1.0m,
                            Name = "管理積分",
                            Type = "management"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8256),
                            Description = "全體適用核心職能",
                            IsActive = true,
                            Multiplier = 1.0m,
                            Name = "核心職能積分",
                            Type = "core"
                        });
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.PointsEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReviewedAt");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer")
                        .HasColumnName("ReviewedBy");

                    b.Property<decimal>("BasePoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("BonusPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EvidenceFiles")
                        .HasColumnType("text");

                    b.Property<decimal>("PenaltyPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PointsEarned")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PromotionMultiplier")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("text");

                    b.Property<int>("StandardId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StandardId");

                    b.ToTable("PointsEntries");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.StandardSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CalculationFormula")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("PointsType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("PointsValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("StandardSettings");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8027),
                            Description = "生產製造部門",
                            IsActive = true,
                            Name = "製造部"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8033),
                            Description = "品質控制與工程部門",
                            IsActive = true,
                            Name = "品質工程部"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8034),
                            Description = "行政管理部門",
                            IsActive = true,
                            Name = "管理部"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8035),
                            Description = "業務銷售部門",
                            IsActive = true,
                            Name = "業務部"
                        });
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.TargetSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumPassingPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("TargetPoints")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TargetSettings");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.WorkLogModels.LogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("LogCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8198),
                            IsActive = true,
                            Name = "生產作業"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8203),
                            IsActive = true,
                            Name = "品質檢驗"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8205),
                            IsActive = true,
                            Name = "設備維護"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#8B5CF6",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8206),
                            IsActive = true,
                            Name = "改善提案"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8206),
                            IsActive = true,
                            Name = "教育訓練"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#6B7280",
                            CreatedAt = new DateTime(2025, 7, 17, 3, 12, 15, 753, DateTimeKind.Utc).AddTicks(8207),
                            IsActive = true,
                            Name = "其他事項"
                        });
                });

            modelBuilder.Entity("PointsManagementAPI.Models.WorkLogModels.WorkLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PointsClaimed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkLogs");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.PointsEntry", b =>
                {
                    b.HasOne("PointsManagementAPI.Models.UserModels.Employee", "Employee")
                        .WithMany("PointsEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointsManagementAPI.Models.PointsModels.StandardSetting", "Standard")
                        .WithMany("PointsEntries")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.StandardSetting", b =>
                {
                    b.HasOne("PointsManagementAPI.Models.PointsModels.StandardSetting", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.Employee", b =>
                {
                    b.HasOne("PointsManagementAPI.Models.UserModels.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.TargetSetting", b =>
                {
                    b.HasOne("PointsManagementAPI.Models.UserModels.Employee", "Employee")
                        .WithMany("TargetSettings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.WorkLogModels.WorkLog", b =>
                {
                    b.HasOne("PointsManagementAPI.Models.WorkLogModels.LogCategory", "Category")
                        .WithMany("WorkLogs")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PointsManagementAPI.Models.UserModels.Employee", "Employee")
                        .WithMany("WorkLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.PointsModels.StandardSetting", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PointsEntries");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.UserModels.Employee", b =>
                {
                    b.Navigation("PointsEntries");

                    b.Navigation("TargetSettings");

                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("PointsManagementAPI.Models.WorkLogModels.LogCategory", b =>
                {
                    b.Navigation("WorkLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
