# 1. 切換到前端專案目錄
cd C:\Users\user\Desktop\潤股-智慧評估系統\employee_smart_assessment_system

# 2. 執行建置
npm run build

# 3. 複製建置檔案到目標資料夾
xcopy /E /I /Y build "C:\Users\user\Desktop\潤股-智慧評估系統\employee_smart_assessment_system\Emp_Smart_Assess_Sys_frontend_build (Web)\frontend"


===============================================================================================

## 前端打包說明

### 打包步驟
1. 切換到專案根目錄：
```bash
cd C:\Users\user\Desktop\潤股-智慧評估系統\employee_smart_assessment_system
```

2. 執行建置指令：
```bash
npm run build
```

3. 複製建置檔案到目標資料夾：
```bash
xcopy /E /I /Y build "C:\Users\user\Desktop\潤股-智慧評估系統\employee_smart_assessment_system\Emp_Smart_Assess_Sys_frontend_build (Web)\frontend"
```

### 前端打包檔案說明
- `static/` - 包含壓縮後的 JS 和 CSS 檔案
- `index.html` - 應用程式入口點
- `manifest.json` - PWA 配置檔案
- `asset-manifest.json` - 資源映射檔案
- `server.js` - 用於生產環境的靜態檔案服務器

## 後端打包說明

### 打包步驟
1. 在專案根目錄employee_smart_assessment_system執行：
```bash
dotnet publish -c Release -o "..\Emp_Smart_Assess_Sys_frontend_build (Web)\backend"
```

### 後端打包檔案說明
- `PointsManagementAPI.dll` - 主要應用程式組件
- `appsettings.json` - 應用程式配置檔案
- 相關依賴 DLL 檔案
- 資料庫遷移檔案

## 打包檔案結構說明

### 前端檔案結構
```
frontend/
├── static/
│   ├── css/
│   │   └── main.*.css
│   └── js/
│       └── main.*.js
├── index.html
├── manifest.json
├── server.js
└── asset-manifest.json
```

### 後端檔案結構
```
backend/
├── PointsManagementAPI.dll
├── PointsManagementAPI.exe
├── appsettings.json
├── appsettings.Development.json
├── appsettings.Production.json
└── [其他依賴 DLL 檔案]
```